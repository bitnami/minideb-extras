#!/bin/bash

[[ $BASH_DEBUG ]] && set -x

BITNAMI_PREFIX=/opt/bitnami
UPDATE_SERVER="https://container.checkforupdates.com"
CURL_ARGS="-sLf --connect-timeout 1 --speed-time 1 --speed-limit 1024"

# turn off welcome and update notification if a tty is attached
if tty -s; then
  DISABLE_UPDATE_MESSAGE=1
  DISABLE_WELCOME_MESSAGE=1
fi

# Color Palette
RESET='\033[0m'
BOLD='\033[1m'

## Foreground
BLACK='\033[38;5;0m'
RED='\033[38;5;1m'
GREEN='\033[38;5;2m'
YELLOW='\033[38;5;3m'
BLUE='\033[38;5;4m'
MAGENTA='\033[38;5;5m'
CYAN='\033[38;5;6m'
WHITE='\033[38;5;7m'

## Background
ON_BLACK='\033[48;5;0m'
ON_RED='\033[48;5;1m'
ON_GREEN='\033[48;5;2m'
ON_YELLOW='\033[48;5;3m'
ON_BLUE='\033[48;5;4m'
ON_MAGENTA='\033[48;5;5m'
ON_CYAN='\033[48;5;6m'
ON_WHITE='\033[48;5;7m'

MODULE="$(basename $0)"

log() {
  echo -e "${NAMI_DEBUG:+${CYAN}${MODULE} ${MAGENTA}$(date "+%T.%2N ")}${RESET}${@}" >&2
}

info() {
  log "${GREEN}INFO ${RESET} ==> ${@}"
}

warn() {
  log "${YELLOW}WARN ${RESET} ==> ${@}"
}

error() {
  log "${RED}ERROR${RESET} ==> ${@}"
}

print_welcome_page() {
  if [ -z "$DISABLE_WELCOME_MESSAGE" ]; then
    if [ -n "$BITNAMI_APP_NAME" ]; then
      print_image_welcome_page
    elif [ -n "$STACKSMITH_STACK_ID" ]; then
      print_stacksmith_welcome_page
    fi
  fi
}

check_for_updates() {
  if [ -z "$DISABLE_LAUNCH_TRACKING" ]; then
    if [ -n "$BITNAMI_APP_NAME" ]; then
      check_for_image_updates
    elif [ -n "$STACKSMITH_STACK_ID" ]; then
      check_for_stack_updates
    fi
  fi
}

# Prints the welcome page for this Bitnami Docker image
print_image_welcome_page() {
  GITHUB_PAGE=https://github.com/bitnami/bitnami-docker-${BITNAMI_APP_NAME}

  log ""
  log "${BOLD}Welcome to the Bitnami ${BITNAMI_APP_NAME} container${RESET}"
  log "Subscribe to project updates by watching ${BOLD}${GITHUB_PAGE}${RESET}"
  log "Submit issues and feature requests at ${BOLD}${GITHUB_PAGE}/issues${RESET}"
  log "Send us your feedback at ${BOLD}containers@bitnami.com${RESET}"
  log ""
}

# Prints the welcome page for this Stacksmith stack
print_stacksmith_welcome_page() {
  STACKSMITH_URL="https://stacksmith.bitnami.com"
  STACKSMITH_STACK_URL="$STACKSMITH_URL/dashboard/stacks/$STACKSMITH_STACK_ID"

  if [ "$STACKSMITH_STACK_PRIVATE" ]; then
    MSG1="Go to $STACKSMITH_STACK_URL to manage your stack."
  else
    MSG1="This stack was created anonymously."
    MSG2="Sign up for a free account at $STACKSMITH_URL to manage and regenerate your stacks."
  fi

  log ""
  log "${BOLD}Welcome to your $STACKSMITH_STACK_NAME container!${RESET}"
  log "Brought to you by Bitnami."
  log "$MSG1"
  log "$MSG2"
  log ""
}

detect_cloud() {
  local CLOUD=unknown
  if curl $CURL_ARGS -o /dev/null http://instance-data/latest/meta-data/; then
    CLOUD=aws
  elif curl $CURL_ARGS -o /dev/null http://metadata.google.internal/0.1/meta-data/; then
    CLOUD=google
  elif curl $CURL_ARGS -o /dev/null http://169.254.169.254/metadata/v1/InstanceInfo; then
    CLOUD=azure
  elif curl $CURL_ARGS -o /dev/null http://169.254.169.254/metadata/v1/vendor-data; then
    CLOUD=do
  fi
  echo $CLOUD
}

detect_platform() {
  local PLATFORM=unknown
  if curl $CURL_ARGS -o /dev/null http://$(curl $CURL_ARGS http://instance-data/latest/meta-data/hostname):51678/v1/metadata; then
    PLATFORM=ecs
  elif [ -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]; then
    PLATFORM=kubernetes
  elif [ -n "$CHE_API" ]; then
    # CHE_API is set by Eclipse Che and Codenvy as of version 5.0.0-M8
    if [ "$CHE_API" == "https://codenvy.io/api" ]; then
      PLATFORM=codenvy
    else
      PLATFORM=che
    fi
  fi
  echo $PLATFORM
}

# Checks for any updates for this Stacksmith stack
check_for_stack_updates() {
  ORIGIN=${BITNAMI_CONTAINER_ORIGIN:-stacksmith}
  CLOUD=${BITNAMI_CONTAINER_CLOUD:-$(detect_cloud)}
  PLATFORM=${BITNAMI_CONTAINER_PLATFORM:-$(detect_platform)}

  RESPONSE=$(curl -s --connect-timeout 20 \
    --cacert /opt/bitnami/updates-ca-cert.pem \
    "$UPDATE_SERVER/api/v1?image=$STACKSMITH_STACK_ID&origin=$ORIGIN&cloud=$CLOUD&platform=$PLATFORM" \
    -w "|%{http_code}")
}

# Checks for any updates for this Bitnami Docker image
check_for_image_updates() {
  ORIGIN=${BITNAMI_CONTAINER_ORIGIN:-DHR}
  CLOUD=${BITNAMI_CONTAINER_CLOUD:-$(detect_cloud)}
  PLATFORM=${BITNAMI_CONTAINER_PLATFORM:-$(detect_platform)}

  RESPONSE=$(curl -s --connect-timeout 20 \
    --cacert $BITNAMI_PREFIX/updates-ca-cert.pem \
    "$UPDATE_SERVER/api/v1?image=$BITNAMI_APP_NAME&version=$BITNAMI_IMAGE_VERSION&origin=$ORIGIN&cloud=$CLOUD&platform=$PLATFORM" \
    -w "|%{http_code}")
}
